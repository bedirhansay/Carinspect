/* tslint:disable */
/* eslint-disable */
/**
 * Rapor Pro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateTestPackageCommand } from '../interfaces';
// @ts-ignore
import type { TestPackageDto } from '../interfaces';
// @ts-ignore
import type { UpdateTestPackageCommand } from '../interfaces';
/**
 * TestPackagesApi - axios parameter creator
 * @export
 */
export const TestPackagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateTestPackageCommand} createTestPackageCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestPackage: async (createTestPackageCommand: CreateTestPackageCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTestPackageCommand' is not null or undefined
            assertParamExists('createTestPackage', 'createTestPackageCommand', createTestPackageCommand)
            const localVarPath = `/api/TestPackages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTestPackageCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestPackage: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTestPackage', 'id', id)
            const localVarPath = `/api/TestPackages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestPackages: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/TestPackages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateTestPackageCommand} updateTestPackageCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTestPackage: async (id: string, updateTestPackageCommand: UpdateTestPackageCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTestPackage', 'id', id)
            // verify required parameter 'updateTestPackageCommand' is not null or undefined
            assertParamExists('updateTestPackage', 'updateTestPackageCommand', updateTestPackageCommand)
            const localVarPath = `/api/TestPackages/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTestPackageCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestPackagesApi - functional programming interface
 * @export
 */
export const TestPackagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestPackagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateTestPackageCommand} createTestPackageCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTestPackage(createTestPackageCommand: CreateTestPackageCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTestPackage(createTestPackageCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestPackagesApi.createTestPackage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTestPackage(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTestPackage(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestPackagesApi.deleteTestPackage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestPackages(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TestPackageDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestPackages(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestPackagesApi.getTestPackages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateTestPackageCommand} updateTestPackageCommand 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTestPackage(id: string, updateTestPackageCommand: UpdateTestPackageCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTestPackage(id, updateTestPackageCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestPackagesApi.updateTestPackage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TestPackagesApi - factory interface
 * @export
 */
export const TestPackagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestPackagesApiFp(configuration)
    return {
        /**
         * 
         * @param {TestPackagesApiCreateTestPackageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTestPackage(requestParameters: TestPackagesApiCreateTestPackageRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.createTestPackage(requestParameters.createTestPackageCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TestPackagesApiDeleteTestPackageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestPackage(requestParameters: TestPackagesApiDeleteTestPackageRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTestPackage(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestPackages(options?: RawAxiosRequestConfig): AxiosPromise<Array<TestPackageDto>> {
            return localVarFp.getTestPackages(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TestPackagesApiUpdateTestPackageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTestPackage(requestParameters: TestPackagesApiUpdateTestPackageRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateTestPackage(requestParameters.id, requestParameters.updateTestPackageCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTestPackage operation in TestPackagesApi.
 * @export
 * @interface TestPackagesApiCreateTestPackageRequest
 */
export interface TestPackagesApiCreateTestPackageRequest {
    /**
     * 
     * @type {CreateTestPackageCommand}
     * @memberof TestPackagesApiCreateTestPackage
     */
    readonly createTestPackageCommand: CreateTestPackageCommand
}

/**
 * Request parameters for deleteTestPackage operation in TestPackagesApi.
 * @export
 * @interface TestPackagesApiDeleteTestPackageRequest
 */
export interface TestPackagesApiDeleteTestPackageRequest {
    /**
     * 
     * @type {string}
     * @memberof TestPackagesApiDeleteTestPackage
     */
    readonly id: string
}

/**
 * Request parameters for updateTestPackage operation in TestPackagesApi.
 * @export
 * @interface TestPackagesApiUpdateTestPackageRequest
 */
export interface TestPackagesApiUpdateTestPackageRequest {
    /**
     * 
     * @type {string}
     * @memberof TestPackagesApiUpdateTestPackage
     */
    readonly id: string

    /**
     * 
     * @type {UpdateTestPackageCommand}
     * @memberof TestPackagesApiUpdateTestPackage
     */
    readonly updateTestPackageCommand: UpdateTestPackageCommand
}

/**
 * TestPackagesApi - object-oriented interface
 * @export
 * @class TestPackagesApi
 * @extends {BaseAPI}
 */
export class TestPackagesApi extends BaseAPI {
    /**
     * 
     * @param {TestPackagesApiCreateTestPackageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPackagesApi
     */
    public createTestPackage(requestParameters: TestPackagesApiCreateTestPackageRequest, options?: RawAxiosRequestConfig) {
        return TestPackagesApiFp(this.configuration).createTestPackage(requestParameters.createTestPackageCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TestPackagesApiDeleteTestPackageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPackagesApi
     */
    public deleteTestPackage(requestParameters: TestPackagesApiDeleteTestPackageRequest, options?: RawAxiosRequestConfig) {
        return TestPackagesApiFp(this.configuration).deleteTestPackage(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPackagesApi
     */
    public getTestPackages(options?: RawAxiosRequestConfig) {
        return TestPackagesApiFp(this.configuration).getTestPackages(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TestPackagesApiUpdateTestPackageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPackagesApi
     */
    public updateTestPackage(requestParameters: TestPackagesApiUpdateTestPackageRequest, options?: RawAxiosRequestConfig) {
        return TestPackagesApiFp(this.configuration).updateTestPackage(requestParameters.id, requestParameters.updateTestPackageCommand, options).then((request) => request(this.axios, this.basePath));
    }
}

